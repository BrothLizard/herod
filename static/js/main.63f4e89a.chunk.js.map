{"version":3,"sources":["app/atouts.tsx","app/Ecu.tsx","app/Champ.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Couleur","FormeEcu","Ecu","props","forme","id","d","fill","champ","React","Children","only","children","height","width","data-testid","Champ","x","y","couleur","clipPath","App","className","EcuAncien","Azur","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAQYA,EAaAC,E,oDAbAD,K,kBAAAA,E,eAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,aAAAA,E,kBAAAA,M,cAaAC,K,6DAAAA,M,KCMGC,MAZf,SAAaC,GACX,IAAMC,EAAQ,0BAAMC,GAAG,WAAWC,EAAGH,EAAMC,MAAOG,KAAK,YACjDC,EAAQC,IAAMC,SAASC,KAAKR,EAAMS,UAExC,OAAO,yBAAKC,OAAO,MAAMC,MAAM,MAAMC,cAAY,OAC/C,8BACE,8BAAUV,GAAG,QAAQD,IAEtBI,ICLUQ,MAJf,SAAeb,GACb,OAAO,0BAAMc,EAAE,IAAIC,EAAE,IAAIJ,MAAM,MAAMD,OAAO,MAAMN,KAAMJ,EAAMgB,QAASC,SAAS,gBCKnEC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAKlB,MAAOH,EAASsB,WACnB,kBAAC,EAAD,CAAOJ,QAASnB,EAAQwB,UCFZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63f4e89a.chunk.js","sourcesContent":["/**\n * Définitions de couleur et forme.\n * @packageDocumentation\n */\n\n/**\n * Déclare les couleurs à utiliser.\n */\nexport enum Couleur {\n  Gueules = '#e20909',\n  Azur = '#2b5df2',\n  Sable = '#000000',\n  Sinople = '#5ab532',\n  Pourpre = '#d576ad',\n  Or = '#fcef3c',\n  Argent = '#ffffff'\n}\n\n/**\n * Déclare les différentes formes d'écu.\n */\nexport enum FormeEcu {\n  EcuAncien = 'M0,0 L0,50 Q0,80 50,110 Q100,80 100,50 L100,0 z'\n}\n","import React, { ReactNode } from 'react';\n\n/**\n * Déclare les propriétés d'un écu.\n */\ntype EcuProps = {\n  forme: string,\n  children: ReactNode\n};\n\n/**\n * Représente un écu avec une forme et son contenu.\n *\n * @param props Les propriétés de l'écu.\n */\nfunction Ecu(props: EcuProps) {\n  const forme = <path id=\"mask-ecu\" d={props.forme} fill=\"#ffffff\" />;\n  const champ = React.Children.only(props.children);\n\n  return <svg height=\"120\" width=\"100\" data-testid=\"ecu\">\n    <defs>\n      <clipPath id=\"mask\">{forme}</clipPath>\n    </defs>\n    {champ}\n  </svg>\n}\n\nexport default Ecu;\n","import React from 'react';\n\n/**\n * Déclare les propriétés d'un champ.\n */\ntype ChampProps = {\n  couleur: string\n};\n\n/**\n * Représente un champ de couleur.\n *\n * @param props Les propriétés du champ.\n */\nfunction Champ(props: ChampProps) {\n  return <rect x=\"0\" y=\"0\" width=\"100\" height=\"120\" fill={props.couleur} clipPath=\"url(#mask)\" />;\n}\n\nexport default Champ;\n","import React from 'react';\nimport './App.css';\n\nimport { FormeEcu, Couleur } from './atouts';\nimport Ecu from './Ecu';\nimport Champ from './Champ';\n\n/**\n * La composante principale de l'application.\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ecu forme={FormeEcu.EcuAncien}>\n        <Champ couleur={Couleur.Azur} />\n      </Ecu>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}