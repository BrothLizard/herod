{"version":3,"sources":["app/atouts.tsx","app/ecu.tsx","app/champ.tsx","serviceWorker.ts","index.tsx","app/app.tsx"],"names":["Couleur","FormeEcu","Ecu","props","forme","id","d","fill","champ","React","Children","only","children","height","width","data-testid","Champ","x","y","couleur","clipPath","Boolean","window","location","hostname","match","ReactDOM","render","className","EcuAncien","Azur","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAQYA,EAaAC,E,0CCNL,SAASC,EAAIC,GACnB,IAAMC,EAAQ,0BAAMC,GAAG,WAAWC,EAAGH,EAAMC,MAAOG,KAAK,YACjDC,EAAQC,IAAMC,SAASC,KAAKR,EAAMS,UAExC,OAAO,yBAAKC,OAAO,MAAMC,MAAM,MAAMC,cAAY,OAChD,8BACC,8BAAUV,GAAG,QAAQD,IAErBI,GCTI,SAASQ,EAAMb,GACrB,OAAO,0BAAMc,EAAE,IAAIC,EAAE,IAAIJ,MAAM,MAAMD,OAAO,MAAMN,KAAMJ,EAAMgB,QAASC,SAAS,gB,SFPrEpB,K,kBAAAA,E,eAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,aAAAA,E,kBAAAA,M,cAaAC,K,6DAAAA,M,KGTQoB,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCZFC,IAASC,OAAO,mBCIT,WACN,OACC,yBAAKC,UAAU,OACd,kBAAC1B,EAAD,CAAKE,MAAOH,EAAS4B,WACpB,kBAACb,EAAD,CAAOG,QAASnB,EAAQ8B,WDRZ,MAASC,SAASC,eAAe,SDqI5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.16db65bf.chunk.js","sourcesContent":["/**\n * Définitions de couleur et forme.\n * @packageDocumentation\n */\n\n/**\n * Déclare les couleurs à utiliser.\n */\nexport enum Couleur {\n\tGueules = '#e20909',\n\tAzur = '#2b5df2',\n\tSable = '#000000',\n\tSinople = '#5ab532',\n\tPourpre = '#d576ad',\n\tOr = '#fcef3c',\n\tArgent = '#ffffff'\n}\n\n/**\n * Déclare les différentes formes d'écu.\n */\nexport enum FormeEcu {\n\tEcuAncien = 'M0,0 L0,50 Q0,80 50,110 Q100,80 100,50 L100,0 z'\n}\n","import React, { ReactNode } from 'react';\n\n/**\n * Déclare les propriétés d'un écu.\n */\ntype EcuProps = {\n\tforme: string,\n\tchildren: ReactNode\n};\n\n/**\n * Représente un écu avec une forme et son contenu.\n *\n * @param props Les propriétés de l'écu.\n */\nexport function Ecu(props: EcuProps) {\n\tconst forme = <path id=\"mask-ecu\" d={props.forme} fill=\"#ffffff\" />;\n\tconst champ = React.Children.only(props.children);\n\n\treturn <svg height=\"120\" width=\"100\" data-testid=\"ecu\">\n\t\t<defs>\n\t\t\t<clipPath id=\"mask\">{forme}</clipPath>\n\t\t</defs>\n\t\t{champ}\n\t</svg>\n}\n","import React from 'react';\n\n/**\n * Déclare les propriétés d'un champ.\n */\ntype ChampProps = {\n\tcouleur: string\n};\n\n/**\n * Représente un champ de couleur.\n *\n * @param props Les propriétés du champ.\n */\nexport function Champ(props: ChampProps) {\n\treturn <rect x=\"0\" y=\"0\" width=\"100\" height=\"120\" fill={props.couleur} clipPath=\"url(#mask)\" />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './app.css';\n\nimport { FormeEcu, Couleur } from './atouts';\nimport { Ecu } from './ecu';\nimport { Champ } from './champ';\n\n/**\n * La composante principale de l'application.\n */\nexport function App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Ecu forme={FormeEcu.EcuAncien}>\n\t\t\t\t<Champ couleur={Couleur.Azur} />\n\t\t\t</Ecu>\n\t\t</div>\n\t);\n}\n"],"sourceRoot":""}